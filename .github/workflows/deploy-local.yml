name: Deploy to Local Server

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check local environment
      run: |
        echo "=== Local Environment Check ==="
        echo "Date: $(date)"
        echo "Uptime: $(uptime)"
        echo "Docker version: $(docker --version)"
        echo "Docker Compose version: $(docker compose version)"
        echo "Available disk space:"
        df -h
        echo "Memory usage:"
        free -h
        echo "Running containers:"
        docker ps -a
        echo "=== Local Environment Check Completed ==="
        
    - name: Clean up old containers and images
      run: |
        echo "=== Cleaning up old containers and images ==="
        
        # Остановка и удаление старых контейнеров приложения
        echo "Stopping and removing old application containers..."
        docker stop university-app || true
        docker rm university-app || true
        
        # Остановка и удаление старых контейнеров базы данных
        echo "Stopping and removing old database containers..."
        docker stop university-postgres || true
        docker rm university-postgres || true
        
        # Удаление старых образов приложения
        echo "Removing old application images..."
        docker rmi university-app:latest || true
        
        # Очистка неиспользуемых образов и контейнеров
        echo "Cleaning up unused Docker resources..."
        docker system prune -f
        
        # Показать освобожденное место
        echo "Docker system usage after cleanup:"
        docker system df
        
        echo "=== Cleanup completed ==="
        
    - name: Setup database locally
      run: |
        echo "=== Setting up database locally ==="
        
        # Запуск PostgreSQL
        echo "Starting PostgreSQL container..."
        docker run -d --name university-postgres \
          -e POSTGRES_DB=university \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD=postgres \
          -p 5432:5432 \
          -v university_postgres_data:/var/lib/postgresql/data \
          postgres:15
        
        # Ожидание готовности БД
        echo "Ожидание готовности базы данных..."
        sleep 30
        
        # Проверка готовности БД
        until docker exec university-postgres pg_isready -U postgres; do
          echo "Ожидание готовности PostgreSQL..."
          sleep 2
        done
        
        echo "База данных запущена и готова к работе"
        
    - name: Build and deploy application locally
      run: |
        echo "=== Building and deploying application ==="
        
        # Сборка образа
        echo "Building application image..."
        docker build -t university-app:latest .
        
        # Запуск приложения
        echo "Starting application container..."
        docker run -d --name university-app -p 8080:8080 \
          -e DB_HOST=university-postgres \
          -e DB_PORT=5432 \
          -e DB_NAME=university \
          -e DB_USER=postgres \
          -e DB_PASSWORD=postgres \
          --link university-postgres:postgres \
          university-app:latest
        
        echo "Приложение успешно развернуто!"
        
    - name: Initialize database with data
      run: |
        echo "=== Initializing database with data ==="
        
        # Выполнение создания таблиц из готового файла
        echo "Создание таблиц..."
        docker exec -i university-postgres psql -U postgres -d university < init/01_create_tables.sql
        
        # Проверка, есть ли уже данные
        DATA_EXISTS=$(docker exec university-postgres psql -U postgres -d university -t -c "SELECT COUNT(*) FROM students;" 2>/dev/null | tr -d ' ')
        
        if [ "$DATA_EXISTS" = "0" ] || [ -z "$DATA_EXISTS" ]; then
          echo "Заполнение базы данных тестовыми данными..."
          # Выполнение вставки данных из готового файла
          docker exec -i university-postgres psql -U postgres -d university < init/02_insert_test_data.sql
          echo "Тестовые данные успешно добавлены!"
        else
          echo "База данных уже содержит данные, пропускаем вставку."
        fi
        
        echo "Инициализация базы данных завершена!"
        
    - name: Verify deployment
      run: |
        echo "=== Verifying deployment ==="
        echo "Checking if containers are running..."
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        
        echo "Testing application endpoint..."
        sleep 10
        curl -f http://localhost:8080/ || echo "Application not responding yet"
        
        echo "=== Deployment verification completed ==="
