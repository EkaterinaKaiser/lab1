name: Deploy to Local Server

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check local environment
      run: |
        echo "=== Local Environment Check ==="
        echo "Date: $(date)"
        echo "Uptime: $(uptime)"
        echo "Docker version: $(docker --version)"
        echo "Docker Compose version: $(docker compose version)"
        echo "Available disk space:"
        df -h
        echo "Memory usage:"
        free -h
        echo "Running containers:"
        docker ps -a
        echo "=== Local Environment Check Completed ==="
        
    - name: Clean up old containers and images
      run: |
        echo "=== Cleaning up old containers and images ==="
        
        # Остановка и удаление старых контейнеров приложения
        echo "Stopping and removing old application containers..."
        docker stop university-app || true
        docker rm university-app || true
        
        # Остановка и удаление старых контейнеров баз данных
        echo "Stopping and removing old database containers..."
        docker stop university-postgres || true
        docker rm university-postgres || true
        docker stop university-mongodb || true
        docker rm university-mongodb || true
        
        # Удаление старых образов приложения
        echo "Removing old application images..."
        docker rmi university-app:latest || true
        
        # Удаление старых томов с данными БД
        echo "Removing old database volumes..."
        docker volume rm university_postgres_data || true
        docker volume rm university_mongodb_data || true
        
        # Очистка неиспользуемых образов и контейнеров
        echo "Cleaning up unused Docker resources..."
        docker system prune -f
        
        # Показать освобожденное место
        echo "Docker system usage after cleanup:"
        docker system df
        
        echo "=== Cleanup completed ==="
        
    - name: Setup database locally
      run: |
        echo "=== Setting up database locally ==="
        
        # Запуск PostgreSQL
        echo "Starting PostgreSQL container..."
        docker run -d --name university-postgres \
          -e POSTGRES_DB=university \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD=postgres \
          -p 5432:5432 \
          -v university_postgres_data:/var/lib/postgresql/data \
          postgres:15
        
        # Ожидание готовности БД
        echo "Ожидание готовности базы данных..."
        sleep 30
        
        # Проверка готовности БД
        until docker exec university-postgres pg_isready -U postgres; do
          echo "Ожидание готовности PostgreSQL..."
          sleep 2
        done
        
        echo "База данных PostgreSQL запущена и готова к работе"
        
    - name: Setup MongoDB locally
      run: |
        echo "=== Setting up MongoDB locally ==="
        
        # Запуск MongoDB
        echo "Starting MongoDB container..."
        echo "=== Параметры запуска MongoDB ==="
        echo "Имя контейнера: university-mongodb"
        echo "Порт: 27017"
        echo "Пользователь: admin"
        echo "База данных: shop"
        echo "Том данных: university_mongodb_data"
        echo "Скрипты инициализации: $(pwd)/mongodb/init"
        echo "=== Запуск контейнера ==="
        
        docker run -d --name university-mongodb \
          -e MONGO_INITDB_ROOT_USERNAME=admin \
          -e MONGO_INITDB_ROOT_PASSWORD=admin123 \
          -e MONGO_INITDB_DATABASE=shop \
          -p 27017:27017 \
          -v university_mongodb_data:/data/db \
          -v $(pwd)/mongodb/init:/docker-entrypoint-initdb.d \
          mongo:4.4
        
        echo "Контейнер MongoDB запущен с ID: $(docker ps -q --filter name=university-mongodb)"
        
        # Ожидание готовности MongoDB
        echo "Ожидание готовности MongoDB..."
        sleep 30
        
        # Диагностика MongoDB
        echo "=== MongoDB Диагностика ==="
        echo "Статус контейнера:"
        docker ps | grep university-mongodb || echo "Контейнер не найден"
        echo "Логи MongoDB:"
        docker logs university-mongodb --tail 10
        echo "=== Конец диагностики ==="
        
        # Проверка готовности MongoDB
        echo "Проверка готовности MongoDB..."
        mongodb_ready=false
        
        for i in {1..30}; do
          echo "Попытка $i/30: Проверка подключения к MongoDB..."
          
          # Пробуем разные способы проверки
          echo "Способ 1: Простая команда mongo"
          if docker exec university-mongodb mongo --eval "print('MongoDB is ready')" 2>&1; then
            echo "✅ MongoDB готов к работе (способ 1)!"
            mongodb_ready=true
            break
          fi
          
          echo "Способ 2: Проверка через admin команду"
          if docker exec university-mongodb mongo --eval "db.adminCommand('ping')" 2>&1; then
            echo "✅ MongoDB готов к работе (способ 2)!"
            mongodb_ready=true
            break
          fi
          
          echo "Способ 3: Проверка статуса контейнера"
          container_status=$(docker inspect university-mongodb --format='{{.State.Status}}' 2>/dev/null || echo "unknown")
          echo "Статус контейнера: $container_status"
          
          if [ "$container_status" = "running" ]; then
            echo "Контейнер запущен, но MongoDB не отвечает"
            echo "Последние логи MongoDB:"
            docker logs university-mongodb --tail 5
          else
            echo "❌ Контейнер не запущен или не найден"
          fi
          
          echo "Ожидание готовности MongoDB... ($i/30)"
          sleep 2
        done
        
        if [ "$mongodb_ready" = "true" ]; then
          echo "✅ MongoDB успешно запущен и готов к работе!"
        else
          echo "❌ КРИТИЧЕСКАЯ ОШИБКА: MongoDB не готов к работе после 30 попыток!"
          echo "=== ДИАГНОСТИКА ПРОБЛЕМЫ ==="
          echo "Статус контейнера:"
          docker ps -a | grep university-mongodb || echo "Контейнер не найден"
          echo "Логи MongoDB (последние 20 строк):"
          docker logs university-mongodb --tail 20
          echo "Использование ресурсов:"
          docker stats university-mongodb --no-stream || echo "Не удалось получить статистику"
          echo "=== КОНЕЦ ДИАГНОСТИКИ ==="
          echo "Продолжаем деплой несмотря на проблемы с MongoDB..."
        fi
        
    - name: Build and deploy application locally
      run: |
        echo "=== Building and deploying application ==="
        
        # Сборка образа
        echo "Building application image..."
        echo "Установка зависимостей:"
        cat requirements.txt
        docker build -t university-app:latest .
        echo "Образ приложения собран успешно!"
        
        # Запуск приложения
        echo "Starting application container..."
        docker run -d --name university-app -p 0.0.0.0:8080:8080 \
          -e DB_HOST=university-postgres \
          -e DB_PORT=5432 \
          -e DB_NAME=university \
          -e DB_USER=postgres \
          -e DB_PASSWORD=postgres \
          -e MONGO_HOST=university-mongodb \
          -e MONGO_PORT=27017 \
          -e MONGO_DB=shop \
          -e MONGO_USER=admin \
          -e MONGO_PASSWORD=admin123 \
          --link university-postgres:postgres \
          --link university-mongodb:mongodb \
          university-app:latest
        
        echo "Приложение запущено!"
        
        # Проверка запуска приложения
        echo "Проверка запуска приложения..."
        sleep 5
        
        echo "=== Статус всех контейнеров ==="
        docker ps -a
        echo "=== Конец статуса контейнеров ==="
        
        if docker ps | grep university-app > /dev/null; then
          echo "✅ Контейнер приложения запущен"
        else
          echo "❌ Контейнер приложения не запущен"
          echo "Логи приложения:"
          docker logs university-app --tail 20
          echo "Логи PostgreSQL:"
          docker logs university-postgres --tail 10
          echo "Логи MongoDB:"
          docker logs university-mongodb --tail 10
        fi
        
    - name: Initialize database with data
      run: |
        echo "=== Initializing database with data ==="
        
        # Выполнение создания таблиц из готового файла
        echo "Создание таблиц..."
        docker exec -i university-postgres psql -U postgres -d university < init/01_create_tables.sql
        
        # Заполнение базы данных тестовыми данными
        echo "Заполнение PostgreSQL тестовыми данными..."
        docker exec -i university-postgres psql -U postgres -d university < init/02_insert_test_data.sql
        echo "PostgreSQL тестовые данные успешно добавлены!"
        
        # Инициализация MongoDB
        echo "Инициализация MongoDB..."
        # MongoDB автоматически выполнит скрипты из /docker-entrypoint-initdb.d при первом запуске
        echo "MongoDB инициализирован автоматически при запуске контейнера"
        
        echo "Инициализация всех баз данных завершена!"
        
    - name: Verify deployment
      run: |
        echo "=== Verifying deployment ==="
        echo "Checking if containers are running..."
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        
        echo "=== Проверка PostgreSQL ==="
        if docker exec university-postgres pg_isready -U postgres -d university > /dev/null 2>&1; then
          echo "✅ PostgreSQL работает корректно"
        else
          echo "❌ PostgreSQL не отвечает"
        fi
        
        echo "=== Проверка MongoDB ==="
        if docker exec university-mongodb mongo --eval "print('MongoDB test')" > /dev/null 2>&1; then
          echo "✅ MongoDB работает корректно"
        else
          echo "❌ MongoDB не отвечает"
          echo "Логи MongoDB:"
          docker logs university-mongodb --tail 10
        fi
        
        echo "=== Проверка приложения ==="
        echo "Testing application endpoint..."
        sleep 10
        
        # Диагностика сетевых настроек
        echo "=== Сетевая диагностика ==="
        echo "Проверка портов:"
        ss -tlnp | grep :8080 || echo "Порт 8080 не слушается"
        echo "Проверка Docker портов:"
        docker port university-app || echo "Контейнер не пробросил порты"
        echo "IP адрес машины:"
        hostname -I
        echo "Проверка firewall (ufw):"
        ufw status 2>/dev/null || echo "ufw не установлен или не активен"
        echo "Попытка открыть порт 8080 в firewall:"
        ufw allow 8080 2>/dev/null || echo "Не удалось открыть порт в firewall (возможно, уже открыт)"
        echo "=== Конец сетевой диагностики ==="
        
        if curl -f http://localhost:8080/ > /dev/null 2>&1; then
          echo "✅ Приложение отвечает на http://localhost:8080/"
          echo "🌐 Доступные адреса:"
          echo "   - http://localhost:8080"
          echo "   - http://$(hostname -I | awk '{print $1}'):8080"
        else
          echo "❌ Приложение не отвечает на localhost:8080"
          echo "Попытка подключения к 0.0.0.0:8080..."
          if curl -f http://0.0.0.0:8080/ > /dev/null 2>&1; then
            echo "✅ Приложение отвечает на 0.0.0.0:8080"
          else
            echo "❌ Приложение не отвечает"
            echo "Логи приложения:"
            docker logs university-app --tail 20
          fi
        fi
        
        echo "=== Deployment verification completed ==="
