name: Deploy to Local Server (Fixed)

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check local environment
      run: |
        echo "=== Local Environment Check ==="
        echo "Date: $(date)"
        echo "Uptime: $(uptime)"
        echo "Docker version: $(docker --version)"
        echo "Docker Compose version: $(docker compose version)"
        echo "Available disk space:"
        df -h
        echo "Memory usage:"
        free -h
        echo "Running containers:"
        docker ps -a
        echo "=== Local Environment Check Completed ==="
        
    - name: Clean up old containers and images
      run: |
        echo "=== Cleaning up old containers and images ==="
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ docker-compose
        echo "Stopping and removing old containers..."
        docker compose down -v --remove-orphans || true
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        echo "Removing old application images..."
        docker rmi university-app:latest || true
        
        # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        echo "Cleaning up unused Docker resources..."
        docker system prune -f
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
        echo "Docker system usage after cleanup:"
        docker system df
        
        echo "=== Cleanup completed ==="
        
    - name: Build and deploy application with docker-compose
      run: |
        echo "=== Building and deploying application with docker-compose ==="
        
        # –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ docker-compose
        echo "Building and starting services..."
        docker compose up -d --build
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
        echo "Waiting for services to be ready..."
        sleep 30
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        echo "=== Service Status ==="
        docker compose ps
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ healthcheck —Å—Ç–∞—Ç—É—Å–∞
        echo "=== Health Check Status ==="
        docker compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
        
        echo "=== Service Logs ==="
        echo "PostgreSQL logs:"
        docker compose logs postgres --tail 10
        echo "MongoDB logs:"
        docker compose logs mongodb --tail 10
        echo "App logs:"
        docker compose logs app --tail 10
        
    - name: Verify deployment
      run: |
        echo "=== Verifying deployment ==="
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        echo "=== Container Status ==="
        docker compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
        echo "=== PostgreSQL Check ==="
        if docker compose exec -T postgres pg_isready -U postgres -d university; then
          echo "‚úÖ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        else
          echo "‚ùå PostgreSQL –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
          docker compose logs postgres --tail 20
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ MongoDB
        echo "=== MongoDB Check ==="
        if docker compose exec -T mongodb mongosh --eval "print('MongoDB test')" > /dev/null 2>&1; then
          echo "‚úÖ MongoDB —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        else
          echo "‚ùå MongoDB –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
          docker compose logs mongodb --tail 20
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        echo "=== Application Check ==="
        echo "Testing application endpoint..."
        sleep 10
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        echo "=== Network Diagnostics ==="
        echo "Checking ports:"
        ss -tlnp | grep :8080 || echo "Port 8080 not listening"
        echo "Docker port mapping:"
        docker compose port app 8080 || echo "Container port not mapped"
        echo "Machine IP:"
        hostname -I
        echo "Firewall status:"
        ufw status 2>/dev/null || echo "ufw not installed or inactive"
        
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç –≤ firewall
        echo "Opening port 8080 in firewall..."
        ufw allow 8080 2>/dev/null || echo "Could not open port (may already be open)"
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if curl -f http://localhost:8080/ > /dev/null 2>&1; then
          echo "‚úÖ Application responds on http://localhost:8080/"
          echo "üåê Available addresses:"
          echo "   - http://localhost:8080"
          echo "   - http://$(hostname -I | awk '{print $1}'):8080"
        else
          echo "‚ùå Application does not respond on localhost:8080"
          echo "Trying 0.0.0.0:8080..."
          if curl -f http://0.0.0.0:8080/ > /dev/null 2>&1; then
            echo "‚úÖ Application responds on 0.0.0.0:8080"
          else
            echo "‚ùå Application does not respond"
            echo "Application logs:"
            docker compose logs app --tail 20
          fi
        fi
        
        echo "=== Deployment verification completed ==="
